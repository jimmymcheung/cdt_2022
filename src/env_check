#!/bin/sh

# Detect OS
if [ -f "/etc/os-release" ]
then
  OS="$(grep '^ID-like=.*' '/etc/os-release')" || OS="$(grep '^ID=.*' '/etc/os-release')"
elif [ ! -f "/etc/os-release" ]
then
  OS="$(uname -s | tr '[:upper:]' '[:lower:]')"
fi
case "$OS" in
  linux|gnu|gnu/*)
    # ...
    system='linux'
    ;;
  'darwin'*)
    # Mac OSX
    system='darwin'
    ;;
  'freebsd'*)
    # ...
    system='freebsd'
    ;;
  'sunos')
    system='solaris'
    ;;
  'windowsnt'|'msys'*|'cygwin'*)
    # POSIX compatibility layer and Linux environment emulation for Windows
    system='windows'
    ;;
  *)
    # Unknown.
    system='default'
    ;;
esac

# Initialise variable
checked=''
self=`echo "$0" | sed -e 's,.*/,,'`

# functions
usage() {
  printf 'Usage:\n\t\033[1m%s\033[0m [\033[1m-h|-?|--help\033[0m] [\033[1m-S|--system\033[0m \033[4mos_name\033[0m]\n' "$self"
}
die() {
  printf '\033[1m%s\033[0m\n' "$1" >&2
  exit 1
}

# get options
while :; do
	case $1 in
	  -h|-\?|--help)
	    usage
	    exit
	    ;;
		-S|--system)
			if [ "$2" ]; then
				system=$2
				shift
			else
				die 'ERROR: "-S" or "--system" requires a non-empty option argument.'
			fi
			;;
		--system=?*)
			system=${1#*=};;
		--system=)
			die 'ERROR: "--system" requires a non-empty option argument.';;
		--)
			shift
			break;;
		-?*)
			printf '\033[5mWARN: Unknown option (ignored): %s\033[0m\n%s\n' "$1" "$(usage)" >&2
			exit 128;;
		*)
			break
	esac

done
if test $# != 0; then
  echo "$self: too many arguments$(usage)" >&2
  exit 1
fi

case "$system" in
  "macOS"|"darwin")
    cmdlist='python3 pip php httpd'
    apache_mod='mod_wsgi';;
  "Ubuntu"|"Debian")
    cmdlist='python3 pip php apache2'
    apache_mod='mod_wsgi';;
  "freebsd")
    printf '\033[1mWARN: Your OS is freebsd. Compatibility is not tested on this system!\033[0m\n'
    exit 1
    ;;
  "Windows"|"windows")
    printf '\033[1mWARN: Your OS is Windows. Compatibility is not tested on this system!\033[0m\n'
    exit 1
    ;;
  *)
    cmdlist='python3 pip php httpd'
    apache_mod='mod_wsgi';;
esac

####### Main Program #######
printf 'The following command are required: %s\n' "$cmdlist"
for i in $cmdlist
do
	check="$(which $i)"
	if [ -z "$check" ]
	then
		printf '\033[1mWARN: Plase install %s\033[0m\n' "$i"
	else
		printf '%s is found at %s\n' "$i" "$check"
		checked="${checked} $i"
	fi
done

# Check if required Apache HTTP server module is enabled
if [ "$(echo $checked | grep 'httpd')" ] || [ "$(echo $checked | grep 'apache2')" ]
then
  for n in $apache_mod
  do
    mod_enable="$(apachectl -M)"
    httpd_check="$(echo $mod_enable | grep $n)"
    if [ -z "$httpd_check" ]
    then
      printf '\033[1mWARN: %s needs to be enabled\033[0m\n' "$n"
    fi
  done
else
  printf '\033[1mERROR: unable to check enabled apache server modules, apache http server not found.\033[0m\n'
fi

# Check if python version is high enough
if [ "$(echo $checked | grep 'python3')" ]
then
  if [ -n "$(python3 --version | grep '3\.[7-9]\|3\.[1-9]\+[0-9]\+')" ]
  then
    printf "\033[0mPython3 version met the minimum requirement\n"
  elif [ -z "$(python3 --version | grep '3\.[7-9]\|3\.[1-9]\+[0-9]\+')" ]
  then
    printf "\033[1mWARN: Python version is too low, you should upgrade Python to at least version 3.7\033[0m\n"
  else
    printf "\033[1mWARN: Unrecognised Python version\033[0m\n"
  fi
fi