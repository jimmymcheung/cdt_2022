#!/bin/bash
version=1.3
# Change log
# Version 1.3
# Added long option, make getting option arguments more portable.
# The command is renamed from `iid_query.sh` to `snp_query`

# Version 1.2
# shipped with ability to query and export individual file.

# Version 1.1
# shipped with ability to query and export RSID marked SNP entry (with -r option)

# Version 1.0
# shipped with ability to query and export private SNP ID entry.

# Initialise all the option variables.
self=`echo "$0" | sed -e 's,.*/,,'`
unset file
unset sc_dir
unset des_dir
reverse=false
file=false

# Functions
usage() {
  printf "\n\033[1m\033[7mUsage:\033[0m\n%s [\033[1m-h\033[0m|\
\033[1m-\?\033[0m|\033[1m--help\033[0m] [\033[1m-r\033[0m|\033[1\
m--reverse\033[0m] [\033[1m-v\033[0m|\033[1m--version\033[0m] [\
\033[1m-s\033[0m|\033[1m--source\033[0m \033[4mpath/to/source\0\
33[0m] [\033[1m-D\033[0m|\033[1m--destination\033[0m \033[4mpat\
h/to/destination\033[0m] [\033[1m-f\033[0m|\033[1m--file\033[0m\
 \033[4mpath/to/file\033[0m]\n\n\033[1m\033[7mArguments:\033[0m\
 \n\t\033[1m-D\033[0m | \033[1m--destination\033[0m\tDestinatio\
n directory. If not supplied, directory \033[4miid\033[0m under\
 the source directory will be used or will be created (in case \
not exist). Space in the name should be escaped, see \033[1m-s\
\033[0m argument for more info.\n\t\033[1m-f\033[0m | \033[1m--f\
ile\033[0m\tSingle file mode. File with extension other than '.\
gt' is also accepted, however, it is important to include a fil\
e extension to prevent error. Input only a signle file insead o\
f a directory.\n\t\033[1m-h\033[0m | \033[1m-\?\033[0m | \033[1\
m--help\033[0m\tDisplay usage.\n\t\033[1m-r\033[0m | \033[1m--r\
everse\033[0m\033[0m\tReverse mode. The script will export rsid\
 records instead of private id records. Can be combined with si\
ngle file mode.\n\t\033[1m-s\033[0m | \033[1m--source\033[0m\tS\
ource Directory. If not supplied, current working directory wil\
l be used. In case directory name contain space, it should be e\
scaped with double quote (\"\") or (\\ ).\n\t\033[1m-v\033[0m |\
 \033[1m--version\033[0m\tPrint script version.\n" "$0"
}
die() {
  printf '\033[1m%s\033[0m\n' "$1" >&2
  exit 1
}
checksource() {
  # compgen is bash only
  exist="$(compgen -G '*.gt')"
  if [ -z "${exist}" ]
  then
    printf "\033[1mWARN: Source directory is empty\033[0m\n" >&2
    exit 1
  fi
}

# Get options
while :; do
  case $1 in
    -h|-\?|--help)
      # Display a usage synopsis.
      usage
      exit
      ;;
    -v|--version)
      printf 'Version: %s\n' "$version"
      exit 0
      ;;
    -r|--reverse)
      reverse=true
      ;;
    # Takes an option argument; ensure it has been specified.
    -f|--file)
      if [ "$2" ]; then
        file=$2
        shift
      else
        die 'ERROR: "-f" or "--file" requires a non-empty option argument.'
      fi
      ;;
    --file=?*)
      # Delete everything up to "=" and assign the remainder.
      file=${1#*=}
      ;;
    # Handle the case of an empty --file=
    --file=)
      die 'ERROR: "--file" requires a non-empty option argument.'
      ;;
    -s|--source)
      if [ "$2" ]; then
        sc_dir=$2
        shift
      else
        die 'ERROR: "-s" or "--source" requires a non-empty option argument.'
      fi
      ;;
    --source=?*)
      # Delete everything up to "=" and assign the remainder.
      sc_dir=${1#*=}
      ;;
    # Handle the case of an empty --source=
    --source=)
      die 'ERROR: "--source" requires a non-empty option argument.'
      ;;
    -D|--destination)
      if [ "$2" ]; then
        des_dir=$2
        shift
      else
        die 'ERROR: "-D" or "--destination" requires a non-empty option argument.'
      fi
      ;;
    --destination=?*)
      # Delete everything up to "=" and assign the remainder.
      des_dir=${1#*=}
      ;;
    # Handle the case of an empty --destination=
    --destination=)
      die 'ERROR: "--destination" requires a non-empty option argument.'
      ;;
    # -V|--verbose)
    #   verbose=$((verbose + 1))  # Each -v adds 1 to verbosity.
    #   ;;
    # End of all options.
    --)
      shift
      break
      ;;
    -?*)
      printf '\033[5mWARN: Unknown option (ignored): %s\033[0m\n%s\n' "$1" "$(usage)" >&2
      exit 128
      ;;
    # Default case: No more options, so break out of the loop.
    *)
      break
  esac
  
  shift
done
if test $# != 0; then
  printf "\033[5m\033[1mWARN: $self: too many arguments\033[0m%s\n" "$(usage)" >&2
  exit 1
fi


# Validate variables
if [ "${file}" != false ] && [ -f "${file}" ]
then
	sc_dir="${file%/*}"
elif [ "${file}" != false ] && [ ! -f "${file}" ]
then
	printf "\033[1mERROR: File not exists\033[0m\n"
	exit 128;
fi
if [ -z "${sc_dir}" ]
then
	sc_dir="."
fi
if [[ "${sc_dir}" =~ .*\/$ ]]
then
	sc_dir="${sc_dir%/}"
fi
if [ -z "${des_dir}" ]
then
	if [ "$reverse" = flase ]
	then
		des_dir="${sc_dir}/iid"
	elif [ "$reverse" = true ]
	then
		des_dir="${sc_dir}/rsid"
	fi
fi
if [[ "${des_dir}" =~ .*\/$ ]]
then
	des_dir="${des_dir%/}"
fi

###### Main Programme ######
if [ "$file" = false ]
then
	if [ -d "$sc_dir" ]
	then
		cd "$sc_dir" && printf 'Landed at %s\n' "$(pwd)"
	else
		printf "\033[1mERROR: No such source directory\033[0m\n";
		exit 128
	fi
	checksource
	if [ ! -d "$des_dir" ]
	then
	        mkdir -p "$des_dir"
	fi

	if [ "$reverse" = false ]
	then
		# export iid
		for n in *.gt
		do
       		 	printf 'Reading %s\n' "$n"
       		 	m="${des_dir}/${n%.gt}_iid.gt"
	        	grep -v '\(\(^rs[0-9]\+.*\)\|\(^#.*\)\)' "$n" > "$m"
       		 	printf 'Finished with %s, output written in %s\n' "$n" "$m"
		done
	elif [ "$reverse" = true ]
	then
		printf "Running in reverse mode.\n"
		# export rsid
		for n in *.gt
		do
			printf 'Reading %s\n' "$n"
       		 	m="${des_dir}/${n%.gt}_rsid.gt"
			grep '\(\(^rs[0-9]\+.*\)\)' "$n" > "$m"
			printf 'Finished with %s, output written in %s\n' "$n" "$m"
		done
	fi
else
	f="${file##*/}"
	if [ ! -d "$des_dir" ]
	then
	        mkdir -p "$des_dir"
	fi
	if [ "$reverse" = true ]
	then
		printf "Running in reverse mode.\n"
		# export rsid
			printf 'Reading %s\n' "${file}"
      m="${des_dir}/${f%.*}_rsid.gt"
			grep '\(\(^rs[0-9]\+.*\)\)' "$file" > "$m"
			printf 'Finished with %s, output written in %s\n' "$f" "$m"
	elif [ "$reverse" = false ]
	then
		# export iid
    printf 'Reading %s\n' "$file"
    m="${des_dir}/${f%.*}_iid.gt"
    grep -v '\(\(^rs[0-9]\+.*\)\|\(^#.*\)\)' "$file" > "$m"
    printf 'Finished with %s, output written in %s\n' "$f" "$m"
	fi
fi
